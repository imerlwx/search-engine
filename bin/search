#!/bin/bash

# Stop on errors
set -Eeuo pipefail
set -x

# Sanity check command line options
usage() {
  echo "Usage: $0 (start|stop|restart|status)"
}
if [ $# -ne 1 ]; then
  usage
  exit 1
fi

SQL_FILE=var/search.sqlite3
# Parse argument.  $1 is the first argument
case $1 in
  "start")
    set +o pipefail
    INDEX_STATUS=$(./bin/index status)
    set -o pipefail
    # Start Search server when database does not exist. Exit non-zero
    if [ ! -f "$SQL_FILE" ]; then
      echo "Error: can't find search database var/search.sqlite3"
      echo "Try: ./bin/searchdb create"
      exit 4
    # Start Search server when Index server is stopped. Exit non-zero
    elif [ "$INDEX_STATUS" -eq 1 ]; then
      echo "Error: index server is not running"
      echo "Try ./bin/index start"
      exit 1
    # Start Search server when itâ€™s already running. Exit non-zero
    elif [ $(pgrep -f "flask --app search run --host 0.0.0.0 --port 8000" | wc -l) -eq 1 ]; then
      echo "Error: search server is already running"
      exit 3
    # Start search
    else
      echo "starting search server ..."
      mkdir -p var/log
      rm -f var/log/search.log
      flask --app search run --host 0.0.0.0 --port 8000 &> var/log/search.log &
    fi
    ;;

  "stop")
    echo "stopping search server ..."
    pkill -f 'flask --app search run --host 0.0.0.0 --port 8000' || true
    ;;

  "restart")
    echo "stopping search server ..."
    pkill -f 'flask --app search run --host 0.0.0.0 --port 8000' || true
    echo "starting search server ..."
    mkdir -p var/log
    rm -f var/log/search.log
    flask --app search run --host 0.0.0.0 --port 8000 &> var/log/search.log &
    ;;

    "status")
      if [ $(pgrep -f "flask --app search run --host 0.0.0.0 --port 8000" |wc -l) -eq 0 ]; then
        echo "search server stopped"
        exit 3
      else
        echo "search server running"
        exit 0
      fi
      ;;

  *)
    usage
    exit 1
    ;;
esac